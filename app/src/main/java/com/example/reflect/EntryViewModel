package com.example.reflect

import androidx.lifecycle.LiveData
import androidx.lifecycle.ViewModel
import reflect_database.my_entry

class EntryViewModel(private val repository: EntryRepository) : ViewModel() {

    val entries: LiveData<List<my_entry>> = repository.entries.asLiveData()

    fun addEntry(journal_entry: my_entry) = viewModelScope.launch {  //wrapper addEntry method
        repository.addEntry(journal_entry)
    }
}
class EntryViewModelFactory(private val repository: EntryRepository) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>) : T {
        if(modelClass.isAssignableFrom(EntryViewModel::class.java)) {
            @Suppress("unchecked cast")
            return EntryViewModel(repository) as T
        }
      throw IllegalArgumentException("unknown ViewModel class")
   }
}
