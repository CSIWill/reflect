package reflect_database

import android.app.Activity
import android.text.Selection
import androidx.recyclerview.widget.SortedList
import androidx.room.*
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.count
import kotlinx.coroutines.flow.flow
import java.sql.Time
import kotlin.time.measureTime

@Dao
interface my_dao {
//    Add Entry
    @Insert
    suspend fun addEntry(my_entry: my_entry)
//    List Entries
    @Query("SELECT * FROM journal_table")
    fun getEntries(): Flow<List<my_entry>>

//sort by Id in the database # 356
//    @Query("SELECT Id FROM journal_table ORDER BY ID ASC")
//    fun <T> sortedSetOf(vararg elements: T):java.util.TreeSet<T> {
//        return elements.toCollection(java.util.TreeSet<T>())
//    }



    //// maybe orders by Id or possibly do nothing
    @Query("SELECT Id, journal_entry, journal_time, journal_mood FROM journal_table ORDER BY ID ASC")
    fun orderById(){
    }

    //// maybe orders by journal_time or possibly do nothing
    @Query("SELECT Id, journal_entry, journal_time, journal_mood FROM journal_table ORDER BY journal_time ASC")
    fun orderByDate(){
    }



//    List entry from date in descending order //// this one breaks because autogenerated method
                                                //// doesn't return column data for time, mood, and entry
//    @Query("SELECT journal_time FROM journal_table ORDER BY DESC")
//    fun getDate(): Flow<List<my_entry>>
//

}

