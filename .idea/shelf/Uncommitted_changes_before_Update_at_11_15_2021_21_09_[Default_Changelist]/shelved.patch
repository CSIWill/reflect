Index: app/src/main/java/com/example/reflect/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.reflect\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.activity.viewModels\r\nimport androidx.appcompat.app.AlertDialog\r\nimport kotlinx.android.synthetic.main.activity_main.*\r\nimport androidx.fragment.app.viewModels\r\nimport kotlinx.coroutines.*\r\nimport reflect_database.my_database\r\nimport reflect_database.my_entry\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    val vm:EntryViewModel by viewModels {EntryViewModelFactory(initDb())}\r\n\r\n    private fun initDb(): EntryRepository {\r\n        val db = my_database.getDatabase(this)\r\n        return EntryRepository(db.reflect_dao())\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n       val showButton = findViewById<Button>(R.id.showInput)\r\n       val editText = findViewById<EditText>(R.id.editText)\r\n\r\n//ALERT BUTTON\r\n        val mAlertDialogBtn = findViewById<Button>(R.id.showInput)\r\n\r\n        showInput.setOnClickListener {\r\n            val mAlertDialog = AlertDialog.Builder(this@MainActivity)\r\n            mAlertDialog.setTitle(\"PLEASE REMEMBER\") //alert dialog title\r\n            mAlertDialog.setMessage(\"You Will Not Be Able To Edit Your Journal Entry After You Hit Submit\")\r\n            mAlertDialog.setIcon(R.mipmap.ic_launcher)\r\n\r\n            mAlertDialog.setPositiveButton(\"Submit\"){dialog, id->\r\n\r\n                Toast.makeText(this@MainActivity, \"Submitted :D\", Toast.LENGTH_SHORT).show() //action After submitted\r\n\r\n\r\n                val text = editText.text // TEXT - THIS NEEDS TO BE ADDED TO THE DATABASE\r\n\r\n                vm.addEntry(my_entry(text.toString()))\r\n\r\n                Toast.makeText(this, text, Toast.LENGTH_LONG).show() // Shouts text - Can remove when database works\r\n            }\r\n\r\n            mAlertDialog.setNegativeButton(\"Go Back\"){dialog, id->\r\n                dialog.dismiss()\r\n\r\n        }\r\n        mAlertDialog.show()\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/reflect/MainActivity.kt b/app/src/main/java/com/example/reflect/MainActivity.kt
--- a/app/src/main/java/com/example/reflect/MainActivity.kt	(revision ed2bb1ad0218c2b2e66b6516f55f804a94a6fed4)
+++ b/app/src/main/java/com/example/reflect/MainActivity.kt	(date 1637027822768)
@@ -15,6 +15,7 @@
 import reflect_database.my_entry
 
 class MainActivity : AppCompatActivity() {
+//    val vm:EntryViewModel by viewModels {EntryViewModelFactory()}
     val vm:EntryViewModel by viewModels {EntryViewModelFactory(initDb())}
 
     private fun initDb(): EntryRepository {
Index: app/src/main/java/com/example/reflect/EntryViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.reflect\r\n\r\nimport androidx.lifecycle.*\r\nimport kotlinx.coroutines.launch\r\nimport reflect_database.my_entry\r\n//import reflect_database.reflect_repository\r\n\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport kotlinx.coroutines.runBlocking\r\n\r\nclass EntryViewModel(private val repository: EntryRepository) : ViewModel() {\r\n\r\n    fun addEntry(new_entry: my_entry) = runBlocking { repository.addEntry(new_entry) }\r\n//    val allEntries: LiveData<List<my_entry>> = repository.allEntries.asLiveData()\r\n//    fun addEntry(new_entry: my_entry) = viewModelScope.launch {\r\n//        repository.addEntry(new_entry)\r\n//    }\r\n}\r\n//class EntryViewModelFactory(private val repository: EntryRepository) : ViewModelProvider.Factory {\r\n//    override fun <T: ViewModel> create(modelClass: Class<T>): T {\r\n//        if (modelClass.isAssignableFrom(EntryViewModel::class.java)) {\r\n//            @Suppress(\"UNCHECKED_CAST\")\r\n//            return EntryViewModel(repository) as T\r\n//        }\r\n//        throw IllegalArgumentException(\"Unknown ViewModel class\")\r\n//    }\r\n//}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/reflect/EntryViewModel.kt b/app/src/main/java/com/example/reflect/EntryViewModel.kt
--- a/app/src/main/java/com/example/reflect/EntryViewModel.kt	(revision ed2bb1ad0218c2b2e66b6516f55f804a94a6fed4)
+++ b/app/src/main/java/com/example/reflect/EntryViewModel.kt	(date 1637027483710)
@@ -12,7 +12,7 @@
 class EntryViewModel(private val repository: EntryRepository) : ViewModel() {
 
     fun addEntry(new_entry: my_entry) = runBlocking { repository.addEntry(new_entry) }
-//    val allEntries: LiveData<List<my_entry>> = repository.allEntries.asLiveData()
+    val allEntries: LiveData<List<my_entry>> = repository.entries.asLiveData()
 //    fun addEntry(new_entry: my_entry) = viewModelScope.launch {
 //        repository.addEntry(new_entry)
 //    }
Index: app/src/main/java/com/example/reflect/EntryRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.reflect\r\n\r\nimport androidx.annotation.WorkerThread\r\nimport kotlinx.coroutines.flow.Flow\r\nimport reflect_database.my_dao\r\nimport reflect_database.my_entry\r\n\r\n//class EntryRepository(private val reflect_dao: my_dao) {\r\n//    suspend fun addEntry(new_entry: my_entry) = reflect_dao.addEntry(new_entry)\r\n//\r\n//    val allEntries: Flow<List<my_entry>> = reflect_dao.getEntries()\r\n//\r\n//}\r\nclass EntryRepository(private val entryDao: my_dao) {\r\n\r\n//    val entries: Flow<List<my_entry>> = entryDao.getEntries()\r\n\r\n\r\n    @Suppress(\"RedundantSuspendModifier\")\r\n    @WorkerThread\r\n    suspend fun addEntry(my_journal_entry: my_entry) {\r\n        entryDao.addEntry(my_journal_entry)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/reflect/EntryRepository.kt b/app/src/main/java/com/example/reflect/EntryRepository.kt
--- a/app/src/main/java/com/example/reflect/EntryRepository.kt	(revision ed2bb1ad0218c2b2e66b6516f55f804a94a6fed4)
+++ b/app/src/main/java/com/example/reflect/EntryRepository.kt	(date 1637027281504)
@@ -13,7 +13,7 @@
 //}
 class EntryRepository(private val entryDao: my_dao) {
 
-//    val entries: Flow<List<my_entry>> = entryDao.getEntries()
+    val entries: Flow<List<my_entry>> = entryDao.getEntries()
 
 
     @Suppress("RedundantSuspendModifier")
Index: app/src/main/java/reflect_database/reflect_dao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package reflect_database\r\n\r\nimport androidx.room.Dao\r\nimport androidx.room.Insert\r\nimport androidx.room.Query\r\nimport kotlinx.coroutines.flow.Flow\r\n\r\n@Dao\r\ninterface my_dao {\r\n//    Add Entry\r\n    @Insert\r\n    suspend fun addEntry(new_entry: my_entry)\r\n//    List Entries\r\n//    @Query(\"SELECT * FROM journal_table\")\r\n//    fun getEntries(): Flow<List<my_entry>>\r\n//    List Entry From date\r\n//    @Query(\"SELECT journal_time FROM journal_table\")\r\n\r\n    //// orders by Id in ascending order\r\n//    @Query(\"SELECT Id, journal_entry, journal_time, journal_mood FROM journal_table ORDER BY ID ASC\")\r\n//    fun orderById(){\r\n//    }\r\n//\r\n//    //// orders by journal_time in ascending order\r\n//    @Query(\"SELECT Id, journal_entry, journal_time, journal_mood FROM journal_table ORDER BY journal_time ASC\")\r\n//    fun orderByDate(){\r\n//    }\r\n//\r\n//    @Query(\"SELECT EXISTS(SELECT journal_entry FROM journal_table WHERE journal_time = journal_time)\")\r\n//    fun getTimeEntry() {\r\n//\r\n//    }\r\n//\r\n//    @Query(\"SELECT EXISTS(SELECT journal_entry FROM journal_table WHERE journal_mood = journal_mood)\")\r\n//    fun getMoodEntry() {\r\n\r\n//    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/reflect_database/reflect_dao.kt b/app/src/main/java/reflect_database/reflect_dao.kt
--- a/app/src/main/java/reflect_database/reflect_dao.kt	(revision ed2bb1ad0218c2b2e66b6516f55f804a94a6fed4)
+++ b/app/src/main/java/reflect_database/reflect_dao.kt	(date 1637027281497)
@@ -11,8 +11,8 @@
     @Insert
     suspend fun addEntry(new_entry: my_entry)
 //    List Entries
-//    @Query("SELECT * FROM journal_table")
-//    fun getEntries(): Flow<List<my_entry>>
+    @Query("SELECT * FROM journal_table")
+    fun getEntries(): Flow<List<my_entry>>
 //    List Entry From date
 //    @Query("SELECT journal_time FROM journal_table")
 
